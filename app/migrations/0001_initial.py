# Generated by Django 5.2.6 on 2025-09-20 08:48

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nombre', models.CharField(max_length=255)),
                ('apellido_paterno', models.CharField(max_length=255)),
                ('apellido_materno', models.CharField(max_length=255)),
                ('sexo', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Femenino')], max_length=1, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('direccion', models.CharField(blank=True, max_length=255, null=True)),
                ('fecha_nacimiento', models.DateField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AreaComun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('descripcion', models.TextField(blank=True, null=True)),
                ('costo_alquiler', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('capacidad', models.IntegerField(help_text='Capacidad máxima de personas.')),
                ('estado', models.CharField(default='disponible', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Casa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_casa', models.CharField(max_length=10, unique=True)),
                ('tipo_de_unidad', models.CharField(help_text='Ej: apartamento, casa, villa', max_length=50)),
                ('numero', models.IntegerField(help_text='Número de la unidad, si es diferente a numero_casa')),
                ('area', models.DecimalField(decimal_places=2, help_text='Área en metros cuadrados (m²)', max_digits=10)),
                ('piso', models.PositiveSmallIntegerField(blank=True, help_text='Número de piso (solo para edificios o torres)', null=True)),
                ('torre_o_bloque', models.CharField(blank=True, help_text="Nombre o identificador de torre/bloque (Ej: 'Torre A', 'Bloque 3')", max_length=50, null=True)),
                ('tiene_parqueo_asignado', models.BooleanField(default=False, help_text='Indica si esta unidad tiene un parqueo asignado')),
                ('numero_parqueo', models.CharField(blank=True, help_text="Identificador del parqueo asignado (Ej: 'P-102', 'Estacionamiento 5')", max_length=20, null=True)),
                ('estado_ocupacion', models.CharField(choices=[('ocupada', 'Ocupada'), ('desocupada', 'Desocupada'), ('en_mantenimiento', 'En Mantenimiento'), ('suspendida', 'Suspendida')], default='desocupada', help_text='Estado actual de ocupación de la unidad', max_length=20)),
                ('fecha_ultima_actualizacion', models.DateTimeField(auto_now=True, help_text='Última vez que se modificó la información de esta casa')),
                ('observaciones', models.TextField(blank=True, help_text='Notas adicionales sobre la unidad (problemas, restricciones, etc.)', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ConceptoPago',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('descripcion', models.TextField(blank=True, null=True)),
                ('es_fijo', models.BooleanField(default=False)),
                ('monto_fijo', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('activo', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Personal',
            fields=[
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('tipo', models.CharField(choices=[('seguridad', 'Seguridad'), ('mantenimiento', 'Mantenimiento'), ('limpieza', 'Limpieza'), ('jardineria', 'Jardinería')], max_length=50)),
                ('fecha_ingreso', models.DateField()),
                ('salario', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('activo', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Bitacora',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login', models.DateTimeField()),
                ('logout', models.DateTimeField(blank=True, null=True)),
                ('ip', models.GenericIPAddressField(blank=True, help_text='Dirección IPv4 o IPv6 del dispositivo', null=True)),
                ('device', models.CharField(blank=True, help_text="Ubicación aproximada (p.ej. 'Ciudad, País' o 'lat,lon')", max_length=255, null=True)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'bitacora',
            },
        ),
        migrations.CreateModel(
            name='Comunicado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=200)),
                ('contenido', models.TextField(help_text='Contenido del comunicado en formato texto plano o HTML')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('fecha_publicacion', models.DateTimeField(blank=True, help_text='Cuando se hizo visible a los residentes', null=True)),
                ('estado', models.CharField(choices=[('borrador', 'Borrador'), ('publicado', 'Publicado'), ('archivado', 'Archivado')], default='borrador', max_length=20)),
                ('archivo_adjunto', models.FileField(blank=True, null=True, upload_to='comunicados_adjuntos/')),
                ('fecha_expiracion', models.DateTimeField(blank=True, help_text='Después de esta fecha, el comunicado ya no se muestra', null=True)),
                ('casa_destino', models.ForeignKey(blank=True, help_text='Si es nulo, va dirigido a todo el condominio', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comunicados', to='app.casa')),
            ],
            options={
                'verbose_name': 'Comunicado',
                'verbose_name_plural': 'Comunicados',
                'ordering': ['-fecha_publicacion', '-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='ContratoArrendamiento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_inicio', models.DateField()),
                ('fecha_fin', models.DateField(blank=True, null=True)),
                ('esta_activo', models.BooleanField(default=True)),
                ('arrendatario', models.ForeignKey(limit_choices_to={'rol__nombre': 'Inquilino'}, on_delete=django.db.models.deletion.CASCADE, related_name='contratos_arrendamiento', to=settings.AUTH_USER_MODEL)),
                ('propietario', models.ForeignKey(limit_choices_to={'rol__nombre': 'Propietario'}, on_delete=django.db.models.deletion.CASCADE, related_name='contratos_arrendamiento_propietario', to=settings.AUTH_USER_MODEL)),
                ('unidad', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contratos_arrendamiento_casa', to='app.casa')),
            ],
            options={
                'verbose_name': 'Contrato de Arrendamiento',
                'verbose_name_plural': 'Contratos de Arrendamiento',
            },
        ),
        migrations.CreateModel(
            name='Cuota',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monto', models.DecimalField(decimal_places=2, max_digits=10)),
                ('periodo', models.DateField()),
                ('fecha_vencimiento', models.DateField()),
                ('estado', models.CharField(choices=[('pendiente', 'Pendiente'), ('pagada', 'Pagada'), ('vencida', 'Vencida'), ('cancelada', 'Cancelada')], default='pendiente', max_length=20)),
                ('fecha_pago', models.DateTimeField(blank=True, null=True)),
                ('generada_automaticamente', models.BooleanField(default=True)),
                ('casa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cuotas', to='app.casa')),
                ('concepto', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.conceptopago')),
            ],
            options={
                'unique_together': {('casa', 'periodo', 'concepto')},
            },
        ),
        migrations.CreateModel(
            name='DetalleBitacora',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accion', models.CharField(max_length=100)),
                ('fecha', models.DateTimeField()),
                ('tabla', models.CharField(max_length=50)),
                ('bitacora', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detallebitacoras', to='app.bitacora')),
            ],
            options={
                'db_table': 'detallebitacora',
            },
        ),
        migrations.CreateModel(
            name='Propiedad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_adquisicion', models.DateField(auto_now_add=True, help_text='Fecha en que el propietario adquirió la propiedad')),
                ('fecha_transferencia', models.DateField(blank=True, help_text='Fecha en que la propiedad fue transferida a otro propietario (si aplica)', null=True)),
                ('activa', models.BooleanField(default=True, help_text='Indica si esta es la asignación de propiedad actual')),
                ('casa', models.OneToOneField(help_text='Casa a la que pertenece esta propiedad', on_delete=django.db.models.deletion.CASCADE, related_name='propiedad', to='app.casa')),
                ('propietario', models.ForeignKey(help_text='Usuario propietario de la casa', limit_choices_to={'rol__nombre': 'Propietario'}, on_delete=django.db.models.deletion.CASCADE, related_name='propiedades', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Propiedad',
                'verbose_name_plural': 'Propiedades',
            },
        ),
        migrations.CreateModel(
            name='Reserva',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateField()),
                ('hora_inicio', models.TimeField()),
                ('hora_fin', models.TimeField()),
                ('estado', models.CharField(choices=[('pendiente', 'Pendiente'), ('confirmada', 'Confirmada'), ('cancelada', 'Cancelada')], default='pendiente', help_text="Ejemplo: 'pendiente', 'confirmada', 'cancelada'.", max_length=50)),
                ('pagada', models.BooleanField(default=False, help_text='Indica si el costo de la reserva ha sido pagado.')),
                ('area_comun', models.ForeignKey(help_text='Área común que se está reservando.', on_delete=django.db.models.deletion.CASCADE, related_name='reservas', to='app.areacomun')),
            ],
        ),
        migrations.CreateModel(
            name='PagoReserva',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monto', models.DecimalField(decimal_places=2, max_digits=8)),
                ('fecha_pago', models.DateTimeField(auto_now_add=True)),
                ('metodo_pago', models.CharField(max_length=50)),
                ('reserva', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pago', to='app.reserva')),
            ],
        ),
        migrations.CreateModel(
            name='Pago',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monto', models.DecimalField(decimal_places=2, max_digits=10)),
                ('fecha_pago', models.DateTimeField(auto_now_add=True)),
                ('metodo_pago', models.CharField(choices=[('tarjeta', 'Tarjeta de crédito/débito'), ('transferencia', 'Transferencia bancaria'), ('efectivo', 'Efectivo'), ('qr', 'Pago QR')], max_length=50)),
                ('referencia', models.CharField(blank=True, max_length=100, null=True)),
                ('comprobante', models.FileField(blank=True, null=True, upload_to='comprobantes/')),
                ('concepto', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.conceptopago')),
                ('cuota', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pagos', to='app.cuota')),
                ('pagado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('reserva', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pagos', to='app.reserva')),
            ],
        ),
        migrations.CreateModel(
            name='Residente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rol_residencia', models.CharField(choices=[('propietario', 'Propietario'), ('familiar', 'Familiar'), ('inquilino', 'Inquilino')], default='familiar', max_length=20)),
                ('fecha_mudanza', models.DateField(auto_now_add=True)),
                ('casa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='residentes', to='app.casa')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='residentes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('usuario', 'casa')},
            },
        ),
        migrations.AddField(
            model_name='reserva',
            name='residente',
            field=models.ForeignKey(blank=True, help_text='Residente que realiza la reserva.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reservas', to='app.residente'),
        ),
        migrations.CreateModel(
            name='Mascota',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('especie', models.CharField(choices=[('perro', 'Perro'), ('gato', 'Gato'), ('ave', 'Ave'), ('otro', 'Otro')], max_length=50)),
                ('raza', models.CharField(blank=True, max_length=100, null=True)),
                ('fecha_nacimiento', models.DateField(blank=True, null=True)),
                ('foto', models.ImageField(blank=True, null=True, upload_to='mascotas/')),
                ('dueno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mascotas', to='app.residente')),
            ],
        ),
        migrations.CreateModel(
            name='Rol',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50)),
                ('grupo', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rol', to='auth.group')),
            ],
        ),
        migrations.AddField(
            model_name='usuario',
            name='rol',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.rol'),
        ),
        migrations.CreateModel(
            name='TareaMantenimiento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(blank=True, help_text='Título breve de la tarea', max_length=200, null=True)),
                ('descripcion', models.TextField(blank=True, help_text='Descripción detallada del trabajo a realizar', null=True)),
                ('ubicacion_personalizada', models.CharField(blank=True, help_text='Descripción de ubicación si no es casa ni área común específica', max_length=200)),
                ('prioridad', models.CharField(choices=[('baja', 'Baja'), ('media', 'Media'), ('alta', 'Alta'), ('critica', 'Crítica')], default='media', max_length=20)),
                ('estado', models.CharField(choices=[('creada', 'Creada'), ('asignada', 'Asignada'), ('en_progreso', 'En progreso'), ('completada', 'Completada'), ('cancelada', 'Cancelada')], default='creada', max_length=20)),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('costo_estimado', models.DecimalField(blank=True, decimal_places=2, help_text='Costo estimado de la tarea', max_digits=10, null=True)),
                ('area_comun', models.ForeignKey(blank=True, help_text='Área común donde se realizará el trabajo (opcional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tareas_mantenimiento', to='app.areacomun')),
                ('casa', models.ForeignKey(blank=True, help_text='Casa específica donde se realizará el trabajo (opcional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tareas_mantenimiento', to='app.casa')),
            ],
            options={
                'verbose_name': 'Tarea de Mantenimiento',
                'verbose_name_plural': 'Tareas de Mantenimiento',
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='Telefono',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero', models.CharField(max_length=20)),
                ('tipo', models.CharField(max_length=50)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='telefonos', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Vehiculo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('placa', models.CharField(max_length=20, unique=True)),
                ('tipo', models.CharField(max_length=50)),
                ('casa', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vehiculos_residentes', to='app.casa')),
                ('dueno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehiculos', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='reserva',
            unique_together={('residente', 'area_comun', 'fecha', 'hora_inicio')},
        ),
    ]
