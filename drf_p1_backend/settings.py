"""
Django settings for drf_p1_backend project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from google.oauth2 import service_account 
from pathlib import Path
from decouple import config
from datetime import timedelta
import stripe 
import base64
import json
import tempfile 

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
'''
# --- CREDENTIALS HANDLING FOR GOOGLE CLOUD STORAGE (GCS) ---
_google_credentials_file_path = None
GS_CREDENTIALS_BASE64 = config('GS_CREDENTIALS_BASE64', default=None)

if GS_CREDENTIALS_BASE64:
    try:
        decoded_credentials = base64.b64decode(GS_CREDENTIALS_BASE64).decode('utf-8')
        json.loads(decoded_credentials)
        
        temp_dir = Path(tempfile.gettempdir())
        temp_credentials_file = temp_dir / "google_credentials_from_base64.json"
        
        with open(temp_credentials_file, "w") as f:
            f.write(decoded_credentials)
            
        _google_credentials_file_path = str(temp_credentials_file)
        os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = _google_credentials_file_path
        print(f"[DEBUG] GCS credentials loaded from Base64 and saved temporarily to: {_google_credentials_file_path}")
        
    except Exception as e:
        print(f"[ERROR] Could not process Base64 GCS credentials: {e}")
else:
    print("[INFO] 'GS_CREDENTIALS_BASE64' is not defined. GCS credentials not configured.")

'''
# --- STRIPE CONFIGURATION ---
STRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY')
STRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET')
FRONTEND_URL = config('FRONTEND_URL', default='http://localhost:5173')

# En settings.py, temporalmente para depuración:
print(f"STRIPE_PUBLISHABLE_KEY: {STRIPE_PUBLISHABLE_KEY}")
print(f"STRIPE_SECRET_KEY: {STRIPE_SECRET_KEY}")
print(f"FRONTEND_URL: {FRONTEND_URL}")
print(f"STRIPE_WEBHOOK_SECRET: {STRIPE_WEBHOOK_SECRET}")
stripe.api_key = STRIPE_SECRET_KEY

# --- FIREBASE CREDENTIALS ---
FIREBASE_CREDENTIALS_BASE64 = config('FIREBASE_CREDENTIALS_BASE64', default='')

if FIREBASE_CREDENTIALS_BASE64:
    try:
        decoded_credentials = base64.b64decode(FIREBASE_CREDENTIALS_BASE64).decode('utf-8')
        FIREBASE_CREDENTIALS = json.loads(decoded_credentials)
        print("Firebase credentials loaded successfully from Base64.")
    except Exception as e:
        print(f"Error decoding or parsing Firebase credentials from Base64: {e}")
        FIREBASE_CREDENTIALS = None 
else:
    print("FIREBASE_CREDENTIALS_BASE64 not found in .env. Firebase will not be initialized.")
    FIREBASE_CREDENTIALS = None

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-atx29evqx8tn7s(cvaa#=%kv2o8m#0v7g3@)@s4yf4&&xp+$6m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]  # TODO: listar los dominios específicos por seguridad en producción. 
auth_user_model = 'app.Usuario'  
AUTH_USER_MODEL = 'app.Usuario'  


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
     # Your app 
    'app',

    # Django REST Framework 
    'rest_framework',
    'corsheaders',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'django_filters',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Debe ir lo más arriba posible!
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Para servir estáticos en producción
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'drf_p1_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # If you have a global templates dir
        'APP_DIRS': True, # Important for finding templates in app/templates/
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'drf_p1_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT', default='5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Configuración de STORAGES para Google Cloud Storage
''''
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
        "OPTIONS": {
            "bucket_name": config("GS_BUCKET_NAME"),
            "project_id": config("GS_PROJECT_ID"),
            "credentials": service_account.Credentials.from_service_account_file(
                _google_credentials_file_path
            ) if _google_credentials_file_path else None,
        },
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}
'''

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- JWT (JSON Web Token) Configuration ---
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(weeks=5),   # Ejemplo: 5 semanas (considera si es apropiado para tu caso)
    'REFRESH_TOKEN_LIFETIME': timedelta(weeks=7),     # Ejemplo: 7 semanas (considera si es apropiado para tu caso)

    # Si se rota el refresh token, generar uno nuevo y descartar el anterior
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,

    # Cabecera esperada: "Authorization: Bearer <token>"
    'AUTH_HEADER_TYPES': ('Bearer',),

    # Solo se aceptan AccessTokens para autenticación
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}

# --- Django REST Framework Configuration ---
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated', # Por defecto, requiere autenticación
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',  # Habilitar filtrado
    ),
    "EXCEPTION_HANDLER": "app.exceptions.custom_exception_handler" # Manejador de excepciones personalizado
}

# --- CORS (Cross-Origin Resource Sharing) Configuration ---
CORS_ALLOW_CREDENTIALS=True
# Define los orígenes permitidos para las solicitudes CORS
CORS_ALLOWED_ORIGINS=["http://localhost:5173", "http://localhost:4200"] # Añade tus frontends aquí

# --- LOGGING Configuration ---
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {'format': '%(levelname)s %(name)s — %(message)s'},
        'verbose': {'format': '%(asctime)s %(levelname)s %(name)s [%(pathname)s:%(lineno)d] — %(message)s'},
    },
    'handlers': {
        'console': {'class': 'logging.StreamHandler', 'formatter': 'verbose'},
    },
    'loggers': {
        'app': { 'handlers': ['console'], 'level': 'INFO', 'propagate': False },
        # o más granular:
        'app.views': { 'handlers': ['console'], 'level': 'INFO', 'propagate': False },
        'storages': { # Para ver logs de django-storages
            'handlers': ['console'],
            'level': 'INFO', 
            'propagate': False,
        },
    }
}